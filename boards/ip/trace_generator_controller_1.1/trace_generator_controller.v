`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: Xilinx
// Engineer: Parimal Patel
// Create Date: 04/13/2017 
// Module Name: trace_generator_controller
// Project Name: PYNQ
//////////////////////////////////////////////////////////////////////////////////

module trace_generator_controller #(parameter ADDR_WIDTH = 18)(
    input clk,
 	// controls_input are multiple clocks wide as they are generated by GPIO write
	// [0] = start, [1] = stop, [2] = DPG, [3] = FSM, [4] = Trace only, [5] = Step
	// [5], [4] and [0] are used
    input [5:0] controls_input,           
    input [ADDR_WIDTH-1:0] numSample,   // Maximum number of samples = BRAM depth = 128K Words
    input reset_n,
    output reg trace_enb_1d
    );
    
     reg step_executed, step_executed_1;
    
    wire start;
    wire stop;
    wire cnt_done;
    wire step;
    reg [ADDR_WIDTH-1:0] count;
    reg trace_enb;
    
    // pulsed output generation
    pulse_gen sync_start(.async_in(controls_input[0]&controls_input[4]), .sync_clk(clk), .pulsed_out(start));
    pulse_gen sync_stop(.async_in(controls_input[1]&controls_input[4]), .sync_clk(clk), .pulsed_out(stop));
    pulse_gen sync_step(.async_in(controls_input[5]&controls_input[4]), .sync_clk(clk), .pulsed_out(step));

    assign cnt_done = (count == (numSample-1)) ? 1'b1 : 1'b0;

    always @(posedge clk)
    if (!reset_n)
        count <= 0;
    else if((start) || (cnt_done) || (stop))
        count <= 0;
    else if(trace_enb | step_executed)
        count <= count + 1;
    else 
        count <= count;

		
    always @(posedge clk)
    if (!reset_n)
        trace_enb_1d <= 0;
    else 
        trace_enb_1d <= (trace_enb | step_executed);

    always @(posedge clk)
    if (!reset_n)
    begin
        trace_enb <= 0;    
        step_executed <= 0;
        step_executed_1 <= 0;
    end
    else
    begin
        if(start)         // start asserted
        begin
            trace_enb <= 1;
            step_executed <= 0;
        end
        else if(stop)    // stop asserted
        begin
            trace_enb <= 0;
            step_executed <= 0;
        end
        else if (cnt_done)
        begin
            trace_enb <= 0;
        end
        else if(step)
        begin
            step_executed <= 1;
            step_executed_1 <= 0;
        end       
        else if(step_executed)
        begin
            step_executed <= 0;
            step_executed_1 <= 1;
        end
        else if(step_executed_1)
        begin
            step_executed_1 <= 0;
        end
        else
        begin
            trace_enb <= trace_enb;
        end       
    end
endmodule