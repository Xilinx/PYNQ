`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: Xilinx
// Engineer: Parimal Patel
// Create Date: 04/13/2017 
// Module Name: trace_only_controller
// Project Name: PYNQ
//////////////////////////////////////////////////////////////////////////////////

module trace_only_controller #(parameter ADDR_WIDTH = 18)(
    input clk,
 	// gpio_control are multiple clocks wide as they are generated by GPIO write
	// [0] = start, [1] = continue, [2] = stop, [3] = PG, [4] = SMG, [5] = Trace ONLY
	// [5] and [0] are used
    input [5:0] gpio_control,           
    input [ADDR_WIDTH-1:0] numSample,   // Maximum number of samples = BRAM depth = 128K Words
    input reset_n,
    output reg trace_enb_1d
    );
    
    reg pause;
    
    wire start;
    wire stop;
    wire cnt_done;
    reg [ADDR_WIDTH-1:0] count;
    reg trace_enb;
    
    // pulsed output generation
    pulse_gen sync_start(.async_in(gpio_control[0]&gpio_control[5]), .sync_clk(clk), .pulsed_out(start));
    pulse_gen sync_stop(.async_in(gpio_control[2]&gpio_control[5]), .sync_clk(clk), .pulsed_out(stop));

    assign cnt_done = (count == (numSample-1)) ? 1'b1 : 1'b0;

    always @(posedge clk)
    if (!reset_n)
        count <= 0;
    else if((start) || (cnt_done))
        count <= 0;
    else if(trace_enb)
        count <= count + 1;
    else 
        count <= count;

		
    always @(posedge clk)
    if (!reset_n)
        trace_enb_1d <= 0;
    else 
        trace_enb_1d <= trace_enb;

    always @(posedge clk)
    if (!reset_n)
    begin
        trace_enb <= 0;    
    end
    else
    begin
        if(start)         // start asserted
        begin
            trace_enb <= 1;
        end
        else if(stop)    // stop asserted
        begin
            trace_enb <= 0;
        end
        else if (cnt_done)
        begin
            trace_enb <= 0;
        end
        else
        begin
            trace_enb <= trace_enb;
        end       
    end
endmodule
