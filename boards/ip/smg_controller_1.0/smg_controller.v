`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: Xilinx
// Engineer: Parimal Patel
// Create Date: 04/13/2017 
// Module Name: smg_controller
// Project Name: PYNQ
//////////////////////////////////////////////////////////////////////////////////

module smg_controller (
    input clk,
 	// gpio_control are multiple clocks wide as they are generated by GPIO write
	// [0] = start, [1] = continue, [2] = stop, [3] = PG, [4] = SMG, [5] = Trace only
    input [5:0] gpio_control,           
    input reset_n,
    output reg smg_enb_1d,
    output reg smg_enb,
    output smg_rst
    );
    
    reg pause;
    
    wire start;
    wire continue;
    wire stop;
    
    assign smg_rst = smg_enb ^ smg_enb_1d;
    
    // pulsed output generation
    pulse_gen sync_start(.async_in(gpio_control[0]&gpio_control[4]), .sync_clk(clk), .pulsed_out(start));
    pulse_gen sync_continue(.async_in(gpio_control[1]&gpio_control[4]), .sync_clk(clk), .pulsed_out(continue));
    pulse_gen sync_stop(.async_in(gpio_control[2]&gpio_control[4]), .sync_clk(clk), .pulsed_out(stop));

    
    always @(posedge clk)
    if (!reset_n)
        smg_enb_1d <= 0;
    else 
        smg_enb_1d <= smg_enb;

    always @(posedge clk)
    if (!reset_n)
    begin
        pause <= 0;
        smg_enb <= 0;    
    end
    else
    begin
        if(start)         // start asserted
        begin
            pause <= 0;
            smg_enb <= 1;
        end
        else if(stop)    // stop asserted
        begin
            pause <= 1;
            smg_enb <= 0;
        end
        else if(continue)    // continue asserted
        begin
            pause <= 0;
            smg_enb <= 1;
        end
        else
        begin
            pause <= pause;
            smg_enb <= smg_enb;
        end       
    end
endmodule
