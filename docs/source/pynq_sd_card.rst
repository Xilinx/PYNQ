.. _pynq-sd-card:

************
PYNQ SD Card
************

The source files for the PYNQ image flow build can be found here:

   ``<GitHub repository>/sdbuild``

Check the readme in this directory for detailed instructions about the Image
flow build.

The PYNQ image for the PYNQ-Z1 is provided precompiled as a downloadable SD card
image, so you do not need to rerun this flow for the PYNQ-Z1 unless you want to
make changes to the image flow.

This flow can also be used as a starting point to build a PYNQ image for another
Zynq board.

The image flow will create the Zynq BOOT.bin, the u-boot bootloaded, the Linux
Device tree blob, and the Linux kernel.

Building the Image
==================

It is recommended to use a Virtual machine to run the image build flow. Root
permissions are required, and the flow has been tested on Ubuntu 16.04.  Vivado
and SDK 2016.1 must be installed.

Run the following script to install the required packages onto the host.

   ``<GitHub repository>/sdbuild/scripts/setup_host.sh``

Once the host has been set up, source the settings for Vivado and SDK, and run
make. The build flow can take several hours.


Retargeting to a Different Board
================================

While the root filesystem is portable between different Zynq boards the boot
files will have to be customised for each board. The boot files can be found in

   ``<GitHub repository>/PYNQ/sdbuild/boot_configs``

There is a standardised flow for Zynq-7000 boards defined in 

   ``<GitHub repository>/sdbuild/boot_configs/common/Zynq7000.makefile``

which is customised by setting a number of variables and providing paths to
some setup scripts. Board-specific configuration is by convention placed in
``boot_configs/${BOARD}-defconfig`` with the variables set in a ``config``
file. The Pynq-Z1-defconfig provides an example of this structure.

The first variable defined should be ``BOARD`` which is used to customise some
other parts of the flow and will ultimated by included in the image as the
``BOARD`` environment.

The flow first creates a simple Vivado project to create the hardware
description file. This process is configured using the variable ``BOARD_PART``
to set the device name, ``PS_CONFIG_TCL`` to reference the tcl file containing
the processing system setup and ``BOARD_CONSTRAINTS`` to reference the ``.xdc``
file containing the top-level constraints for the board.

Following the creation of the hardware description the first stage bootloader
and devicetree file are created. While the FSBL is not customisable the
devicetree can be modified by adding or reconfiguring entries. The
``BOARD_DTSI`` variable can be pointed to a devicetree fragment to applied to
the devicetree generated by SDK.

U-boot and the Linux kernel are built in the same manner. First the repository
pointed to by ``LINUX_REPO`` or ``UBOOT_REPO`` is cloned and the configuration
referenced in ``LINUX_CONFIG`` or ``UBOOT_CONFIG`` applied before the
repository is built.

The final aspect is the bitstream to be downloaded on boot. By default this
will be the base overlay found in ``PYNQ/boards/${BOARD}/base/base.bit`` but
this can be changed by defining the ``BOOT_BITSTREAM`` variable.

Once a boot configuration is defined for a board it needs to be incorporated
into a release which live in the ``PYNQ/sdbuild/releases`` folder. A release is
a single ``.config`` file defining ``BOOT_CONFIG`` and ``ROOTFS_CONFIG``
variables.  The boot config should be the name of the folder in the
``boot_configs`` folder and the rootfs should be ``Pynq-Z1-Wily``. While the
root filesystem is designed around the Pynq-Z1 board it should work on any
board with similar connectivity, i.e. PS attached Ethernet and USB host ports.

More details on configuring the root filesystem can be found in the README file
in the ``sdbuild`` folder.
